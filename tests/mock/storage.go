// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/storage/storage.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockStorageRecorder
}

// Recorder for MockStorage (not exported)
type _MockStorageRecorder struct {
	mock *MockStorage
}

func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &_MockStorageRecorder{mock}
	return mock
}

func (_m *MockStorage) EXPECT() *_MockStorageRecorder {
	return _m.recorder
}

func (_m *MockStorage) Set(key string, data interface{}) {
	_m.ctrl.Call(_m, "Set", key, data)
}

func (_mr *_MockStorageRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}

func (_m *MockStorage) Get(key string) interface{} {
	ret := _m.ctrl.Call(_m, "Get", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

func (_mr *_MockStorageRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockStorage) GetAll() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "GetAll")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

func (_mr *_MockStorageRecorder) GetAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAll")
}

func (_m *MockStorage) Exists(key string) bool {
	ret := _m.ctrl.Call(_m, "Exists", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockStorageRecorder) Exists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exists", arg0)
}
